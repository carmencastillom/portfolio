{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cb95c86a",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<br><h2>A2: MODELING CASE STUDY (INDIVIDUAL)</h2>\n",
    "<h4> | Introduction to ML & AI</h4>\n",
    "MBAN - Hult International Business School<br>\n",
    "April 5, 2024 <br><br><br>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<br>\n",
    "\n",
    "<h3>Analysis Introduction</h3><br>\n",
    "As a Public health consultant, we are diving into a very important analysis \n",
    "focus on understanding how the different metrics present on the dataset given \n",
    "would affect to birthweight. \n",
    "\n",
    "The main goal with this it is to understand how health are \n",
    "the babies based on their birthweight. This code will engineer a new metric to \n",
    "predict. This binary classifier will operationalize the condition where a baby's \n",
    "birthweight falls below 2500 grams—a threshold recognized by medical professionals \n",
    "for indicating low birthweight—as 1, encapsulating this critical health indicator \n",
    "within a tangible, actionable framework - Creating a binary indicator for low birth \n",
    "weight 'low_bwght' = 'bwght' < 2500.\n",
    "\n",
    "This script also will run a Machine Learning Model to help us to come up \n",
    "with good insights. \n",
    "\n",
    "\n",
    "<h3>Analysis Questions</h3><br>\n",
    "Here below there are the questions assigned to answer during the analysis \n",
    "\n",
    "   - **Strong positive correlations with bwght:** The higher the variable, the greater the bwght.\n",
    "     - npvis: 0.18\n",
    "     - fage: 0.14\n",
    "     As indicated by the numbers above, higher hospital visits (npvis) and older fathers (fage) are associated with higher birthweights.\n",
    "\n",
    "   - **Strong negative correlations with bwght:** The higher the variable, the lower the bwght.\n",
    "     - foth: -0.07\n",
    "     As indicated by the numbers above, if the father is of an ethnicity other than black or white, the child will weigh less.\n",
    "\n",
    "There is an official threshold that indicates when birthweight becomes more dangerous. Studies indicate that \"If your baby weighs less than 2500 grams, he or she has a low birth weight.\" Research also suggests that low birth weight might cause several issues such as low oxygen levels at birth, trouble staying warm, and infection.\n",
    "\n",
    "The two features that have the strongest impact on the ML model are:\n",
    "\n",
    "   - **feduc_npvis_interaction**: This feature indicates how the father's education level relates to the number of visits. Higher education levels of fathers and more frequent prenatal visits positively affect birthweight. Better education may lead to better job opportunities and higher income, enabling better access to healthcare. Conversely, individuals with lower education levels may face barriers to accessing healthcare, so having access to healthcare would ensure that kids are in general health \n",
    "   \n",
    "   - **meduc_npvis_interaction**:This feature indicates how the mother´s education level relates to the number of visits. This feature that also correlated good with birthweight could be understand as same as the one above. Better education, means being better prepared for the future in terms of job so might not be any problems to go into the healthcare system.\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "1a60a4fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bwt_id</th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>omaps</th>\n",
       "      <th>fmaps</th>\n",
       "      <th>cigs</th>\n",
       "      <th>drink</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bwt_1</td>\n",
       "      <td>28</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bwt_2</td>\n",
       "      <td>21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bwt_3</td>\n",
       "      <td>27</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bwt_4</td>\n",
       "      <td>33</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1</td>\n",
       "      <td>20.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>bwt_5</td>\n",
       "      <td>30</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2</td>\n",
       "      <td>12.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>bwt_6</td>\n",
       "      <td>29</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>bwt_7</td>\n",
       "      <td>31</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2</td>\n",
       "      <td>12.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>bwt_8</td>\n",
       "      <td>28</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>bwt_9</td>\n",
       "      <td>24</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>bwt_10</td>\n",
       "      <td>28</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1786</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bwt_id  mage  meduc  monpre  npvis  fage  feduc  omaps  fmaps  cigs  drink  male  mwhte  mblck  moth  fwhte  fblck  foth  bwght\n",
       "0   bwt_1    28   12.0       2   10.0  31.0   17.0    8.0    9.0   0.0    0.0     0      1      0     0      1      0     0   3317\n",
       "1   bwt_2    21    NaN       1    6.0  21.0    NaN    8.0    9.0   NaN    NaN     0      1      0     0      1      0     0   1160\n",
       "2   bwt_3    27   15.0       2   11.0  32.0   16.0    9.0    9.0   0.0    0.0     1      1      0     0      1      0     0   4706\n",
       "3   bwt_4    33   17.0       1   20.0  39.0   17.0    9.0   10.0   0.0    0.0     0      0      0     1      0      0     1   3289\n",
       "4   bwt_5    30   15.0       2   12.0  36.0   16.0    9.0    9.0   NaN    NaN     1      1      0     0      1      0     0   3490\n",
       "5   bwt_6    29   16.0       1   12.0  32.0   16.0    8.0    9.0   0.0    0.0     0      1      0     0      1      0     0   3345\n",
       "6   bwt_7    31   12.0       2   12.0  31.0   12.0    9.0    9.0   0.0    0.0     0      1      0     0      1      0     0   3030\n",
       "7   bwt_8    28   12.0       1   13.0  31.0   14.0    8.0    9.0   0.0    0.0     0      1      0     0      1      0     0   3771\n",
       "8   bwt_9    24   12.0       2   15.0  25.0   12.0    8.0    9.0   0.0    0.0     1      1      0     0      1      0     0   1660\n",
       "9  bwt_10    28   16.0       1   12.0  32.0   12.0    8.0    9.0   0.0    0.0     0      1      0     0      1      0     0   1786"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##############################################################################\n",
    "############################ Importing Packages ##############################         \n",
    "##############################################################################\n",
    "\n",
    "# importing libraries\n",
    "import numpy             as np  # mathematical essentials\n",
    "import pandas            as pd  # data science essentials\n",
    "import matplotlib.pyplot as plt # data visualization\n",
    "import seaborn           as sns # enhanced data viz\n",
    "import phik                     # phi coefficient\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression, RidgeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# loading data\n",
    "\n",
    "# setting pandas print options\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)\n",
    "pd.set_option('display.max_colwidth', 100)\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "######################### Importing & Reading Datasets #######################         \n",
    "##############################################################################\n",
    "\n",
    "# loading data\n",
    "file = './datasets/birthweight.csv'\n",
    "\n",
    "data = pd.read_csv(file)\n",
    "\n",
    "data.head(n=10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "b803d4bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Preparing Data Kaggle\n",
    "file_2 = './datasets/kaggle_test_data.csv'\n",
    "\n",
    "df_test = pd.read_csv(file_2)\n",
    "\n",
    "data['set'] = 'Not Kaggle'\n",
    "df_test ['set'] = 'Kaggle'\n",
    "\n",
    "df_full = pd.concat(objs = [data, df_test],\n",
    "                    axis = 0,\n",
    "                    ignore_index = False)\n",
    "\n",
    "\n",
    "## Preparing X_kaggle_test\n",
    "#X_kaggle_test = data_kaggle.drop(['bwt_id'], axis=1, errors='ignore')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b43450e8",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<h3>Exploratory Data Analysis and Data Processing</h3>\n",
    "\n",
    "<p>\n",
    "Data analysis is essential for handling missing values in datasets. Understanding \n",
    "the structure and characteristics of our data allows us to make informed decisions on \n",
    "how to handle missing values, such as imputing them with appropriate statistics like the median or mean. \n",
    "These steps are crucial for preparing our data to be used in predictive modeling tasks.\n",
    "\n",
    "Null values in all columns have been imputed with the median values. \n",
    "This choice is made because our data distribution generally contains outliers. \n",
    "Using the mean ensures that our imputed values are robust to the presence of outliers.\n",
    "Bwght feature is not going to be imputed as it is the column used for predictions. \n",
    "    \n",
    "- We have dropped columns 'omaps','fmaps' as they are not relevant for our analysis.\n",
    "- Regarding Null Values, we have 5 nulls that need to be imputed. \n",
    "\n",
    "Also, regarding distribution: \n",
    "  \n",
    "    - mage: Appears to be normally distributed, centered around the 20s and 30s.\n",
    "    - meduc: Bimodal distribution, with peaks at the completion of middle school and high school.\n",
    "    - monpre: Right-skewed distribution, indicating that low values are common and high values are rare.\n",
    "    - npvis: Very right-skewed.\n",
    "    - fage: Appears to be normally distributed.\n",
    "    - feduc: Highly irregular distribution.\n",
    "    - Cigs and Drinks variables indicate that many individuals from the survey do not smoke or drink.\n",
    "    \n",
    "</p>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "908794b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>omaps</th>\n",
       "      <th>fmaps</th>\n",
       "      <th>cigs</th>\n",
       "      <th>drink</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>473.000000</td>\n",
       "      <td>467.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>452.000000</td>\n",
       "      <td>472.000000</td>\n",
       "      <td>463.000000</td>\n",
       "      <td>471.000000</td>\n",
       "      <td>471.000000</td>\n",
       "      <td>440.000000</td>\n",
       "      <td>441.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>473.000000</td>\n",
       "      <td>409.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>29.784355</td>\n",
       "      <td>13.680942</td>\n",
       "      <td>2.205074</td>\n",
       "      <td>11.535398</td>\n",
       "      <td>32.169492</td>\n",
       "      <td>13.866091</td>\n",
       "      <td>8.225053</td>\n",
       "      <td>8.951168</td>\n",
       "      <td>1.172727</td>\n",
       "      <td>0.020408</td>\n",
       "      <td>0.505285</td>\n",
       "      <td>0.871036</td>\n",
       "      <td>0.073996</td>\n",
       "      <td>0.054968</td>\n",
       "      <td>0.877378</td>\n",
       "      <td>0.073996</td>\n",
       "      <td>0.048626</td>\n",
       "      <td>3189.870416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.105664</td>\n",
       "      <td>2.136672</td>\n",
       "      <td>1.330149</td>\n",
       "      <td>3.924575</td>\n",
       "      <td>6.097656</td>\n",
       "      <td>2.222327</td>\n",
       "      <td>1.368447</td>\n",
       "      <td>0.575893</td>\n",
       "      <td>4.211621</td>\n",
       "      <td>0.297017</td>\n",
       "      <td>0.500501</td>\n",
       "      <td>0.335515</td>\n",
       "      <td>0.262041</td>\n",
       "      <td>0.228160</td>\n",
       "      <td>0.328350</td>\n",
       "      <td>0.262041</td>\n",
       "      <td>0.215312</td>\n",
       "      <td>748.450059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>16.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>360.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2780.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3340.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>33.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3686.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>44.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5089.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mage       meduc      monpre       npvis        fage       feduc       omaps       fmaps        cigs       drink        male       mwhte       mblck        moth       fwhte       fblck        foth        bwght\n",
       "count  473.000000  467.000000  473.000000  452.000000  472.000000  463.000000  471.000000  471.000000  440.000000  441.000000  473.000000  473.000000  473.000000  473.000000  473.000000  473.000000  473.000000   409.000000\n",
       "mean    29.784355   13.680942    2.205074   11.535398   32.169492   13.866091    8.225053    8.951168    1.172727    0.020408    0.505285    0.871036    0.073996    0.054968    0.877378    0.073996    0.048626  3189.870416\n",
       "std      5.105664    2.136672    1.330149    3.924575    6.097656    2.222327    1.368447    0.575893    4.211621    0.297017    0.500501    0.335515    0.262041    0.228160    0.328350    0.262041    0.215312   748.450059\n",
       "min     16.000000    3.000000    0.000000    0.000000   18.000000    6.000000    1.000000    5.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   360.000000\n",
       "25%     26.000000   12.000000    1.000000   10.000000   28.000000   12.000000    8.000000    9.000000    0.000000    0.000000    0.000000    1.000000    0.000000    0.000000    1.000000    0.000000    0.000000  2780.000000\n",
       "50%     30.000000   13.000000    2.000000   12.000000   32.000000   14.000000    9.000000    9.000000    0.000000    0.000000    1.000000    1.000000    0.000000    0.000000    1.000000    0.000000    0.000000  3340.000000\n",
       "75%     33.000000   16.000000    3.000000   13.000000   36.000000   16.000000    9.000000    9.000000    0.000000    0.000000    1.000000    1.000000    0.000000    0.000000    1.000000    0.000000    0.000000  3686.000000\n",
       "max     44.000000   17.000000    8.000000   36.000000   62.000000   17.000000   10.000000   10.000000   30.000000    6.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000    1.000000  5089.000000"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_full.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "aca5529d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bwt_id     0\n",
       "mage       0\n",
       "meduc      6\n",
       "monpre     0\n",
       "npvis     21\n",
       "fage       1\n",
       "feduc     10\n",
       "omaps      2\n",
       "fmaps      2\n",
       "cigs      33\n",
       "drink     32\n",
       "male       0\n",
       "mwhte      0\n",
       "mblck      0\n",
       "moth       0\n",
       "fwhte      0\n",
       "fblck      0\n",
       "foth       0\n",
       "bwght     64\n",
       "set        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_full.isnull().sum(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "5e6204c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bwt_id     0\n",
       "mage       0\n",
       "meduc      0\n",
       "monpre     0\n",
       "npvis      0\n",
       "fage       0\n",
       "feduc      0\n",
       "omaps      2\n",
       "fmaps      2\n",
       "cigs       0\n",
       "drink      0\n",
       "male       0\n",
       "mwhte      0\n",
       "mblck      0\n",
       "moth       0\n",
       "fwhte      0\n",
       "fblck      0\n",
       "foth       0\n",
       "bwght     64\n",
       "set        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##############################################################################\n",
    "##########################      NUll values   ################################\n",
    "##############################################################################\n",
    "\n",
    "##Using the mean in all our metrics to impute our null values.\n",
    "\n",
    "\n",
    "# Calculate the mean on meduc\n",
    "mean_meduc = df_full['meduc'].mean()\n",
    "# Fill null values with the median visibility\n",
    "df_full['meduc'].fillna(value=mean_meduc, inplace=True)\n",
    "\n",
    "# Calculate the mean on npvis \n",
    "mean_npvis = df_full['npvis'].mean()\n",
    "# Fill null values with the median visibility\n",
    "df_full['npvis'].fillna(value=mean_npvis, inplace=True)\n",
    "\n",
    "# Calculate mean on fage \n",
    "mean_fage = df_full['fage'].mean()\n",
    "# Fill null values with the median visibility\n",
    "df_full['fage'].fillna(value=mean_fage, inplace=True)\n",
    "\n",
    "#Calcualte mean feduc \n",
    "mean_feduc =df_full['feduc'].mean()\n",
    "# Fill null values with the median visibility\n",
    "df_full['feduc'].fillna(value=mean_feduc, inplace=True)\n",
    "\n",
    "#\n",
    "mean_cigs = df_full['cigs'].mean()\n",
    "# Fill null values with the median visibility\n",
    "df_full['cigs'].fillna(value=mean_cigs, inplace=True)\n",
    "\n",
    "mean_drink =df_full['drink'].mean()\n",
    "df_full['drink'].fillna(value=mean_drink, inplace=True)\n",
    "\n",
    "df_full.isnull().sum(axis = 0) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "9789566d",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Droping 'omaps','fmaps' which does not make sense for our analysis\n",
    "\n",
    "df_full=df_full.drop(['omaps','fmaps'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "b8852732",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bwt_id     0\n",
       "mage       0\n",
       "meduc      0\n",
       "monpre     0\n",
       "npvis      0\n",
       "fage       0\n",
       "feduc      0\n",
       "cigs       0\n",
       "drink      0\n",
       "male       0\n",
       "mwhte      0\n",
       "mblck      0\n",
       "moth       0\n",
       "fwhte      0\n",
       "fblck      0\n",
       "foth       0\n",
       "bwght     64\n",
       "set        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Null no anymore\n",
    "df_full.isnull().sum(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "c4177980",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##############################################################################\n",
    "#########################  Correlation HeatMap   #############################          \n",
    "##############################################################################\n",
    "\n",
    "#Creating a df to drop non - numerical values\n",
    "df_special = df_full.drop(['bwt_id','set'], axis=1)\n",
    "\n",
    "#Compute the correlation matrix\n",
    "\n",
    "corr_matrix = df_special.corr()\n",
    "\n",
    "# Set up the matplotlib figure\n",
    "plt.figure(figsize=(10, 8))\n",
    "\n",
    "# Draw the heatmap with the mask and correct aspect ratio\n",
    "sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", cmap='coolwarm', square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n",
    "\n",
    "# Show the plot \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "73984b1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bwght</th>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>npvis</th>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fage</th>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>monpre</th>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feduc</th>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mage</th>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fblck</th>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mwhte</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mblck</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fwhte</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>meduc</th>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>drink</th>\n",
       "      <td>-0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cigs</th>\n",
       "      <td>-0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>moth</th>\n",
       "      <td>-0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foth</th>\n",
       "      <td>-0.07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        bwght\n",
       "bwght    1.00\n",
       "npvis    0.18\n",
       "fage     0.14\n",
       "monpre   0.06\n",
       "feduc    0.06\n",
       "male     0.06\n",
       "mage     0.05\n",
       "fblck    0.04\n",
       "mwhte    0.02\n",
       "mblck    0.02\n",
       "fwhte    0.02\n",
       "meduc    0.00\n",
       "drink   -0.03\n",
       "cigs    -0.04\n",
       "moth    -0.05\n",
       "foth    -0.07"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##############################################################################\n",
    "#########################  Correlation Matrix   ##############################          \n",
    "##############################################################################\n",
    "\n",
    "# Below we can see that clearly there are two metrics that correlate better \n",
    "# with bwght, so we basically are going to focus on this on the feature \n",
    "# engineering \n",
    "\n",
    "df_corr = df_full.drop(columns=['bwt_id', 'set'\n",
    "                               ]).corr(method = 'pearson').round(2)\n",
    "\n",
    "df_corr.loc[ : , ['bwght'] ].sort_values(by = 'bwght',\n",
    "                                                                ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "c57f9db1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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VYsWLby6zl69eskwDO3fv19du3a94lhfnr00ZMgQffjhh8rIyJDb7VZ8fLxCQkIUFRWl9PR0bd68Wffcc48nRFT+3GfPnq3Ro0fXOGeXLl1qXH619wpgNmyZARrYTTfdpP/4j//QtGnTdOrUKc/ZHpf7n+69994r6WLI+LGsrCxlZ2dryJAhkqTY2FjZbDa9++67Vcbt3LmzTrsCLBaLp5ZK+/fvr3JQp6906dJFrVu3VlpaWpUDq8+dO6cPPvjAc4aTN1VeaC88PLxez/fWFor77rtPJ0+eVEpKivr166eQkBBJF0POunXrlJWV5dnFJF3sVUxMjPbt21fjFsO+fft65rhUly5d5HA4qp31lJ+fr8zMzHq/BrbWwF/YMgM0gJEjR6pnz57q27evbrnlFuXl5SklJUXt27dXTEyMJOm2226TJL366qsaP368goKC1KVLF3Xp0kWTJ0/Wa6+9JqvVqmHDhnnOZmrbtq2effZZSRd368yYMUMLFixQixYtNGrUKB09elTz5s1TZGRklWNQrmTEiBH63e9+p7lz5youLk45OTl68cUXFR0dXePZXN5ktVq1ePFijR07ViNGjNCUKVNUVlaml19+WWfOnNHChQuvaf7Dhw97Tic+e/asNm/erLfeekt9+/bVPffcU685K6/wu2LFCoWEhKhp06aKjo6ucffSldx7772yWCzatGlTlQvP3XfffRo/frzn7z/25ptvatiwYbr//vs1YcIEtW7dWqdOnVJ2drb27Nmj999/v8Z1Wa1WzZs3T1OmTNF//Md/aOLEiTpz5kyd3yuXqnwPL1q0SMOGDVNAQIB69erl2cUI+AphBmgAgwcP1gcffKCVK1equLhYDodDCQkJeuGFFzzXOImPj9fs2bO1evVq/fGPf5Tb7dbWrVs9u3w6duyot956S6+//rrCwsI0dOhQLViwoMovzZdeeknNmjXT8uXLlZqaqq5du2rZsmWaM2eO53Teq5kzZ45KS0v11ltvafHixerevbuWL1+udevW1ety+HWVlJSkZs2aacGCBRozZowCAgLUr18/bd261XO8SH09//zznr83a9ZM7du31wsvvKAZM2ZUObi1LqKjo5WSkqJXX31V8fHxqqioUGpqap2/zqJly5a6/fbb9fnnn1cJLZV/r3z8xwYPHqzPPvtML730kqZPn67Tp0+rZcuW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9nfN9em/L993NxJ/fubXZZ0Wow77ih5//PFajUtNTa11AV988YX69++vH374Qc2bN1daWpqGDx+uzMxMDRw4UMeOHVNUVJRn/OTJk5WXl6eNGzfWOJ/T6azxysRpaWk1ftM3AABofEpLS5WUlKSzZ88qNDT0imPrFGZ84fz588rPz9eZM2f0wQcfaOXKlcrIyNCZM2c0cOBAHT9+XJGRkZ7xTz75pI4cOaINGzbUOF9NW2batm2roqKiqzYDV1deXq709HQlJCQoKCjI3+XcUHzd+3379mnQoEGavHK9orr09Nq8x3MOaMWkB7V9+3b17u3db+P2Vc2StG/Th1r3u2c1eeV6tYnpqpjju3U46k65rfW6PFeN8/qyZm/O7e+are4Lde6/L993NxJ/fuYXFxerVatWtQoz1/av0guaNGmiTp06SZL69u2rrKwsvfrqq/r1r38tSSooKKgSZgoLC694KrjNZvPsBvuxoKAgfvl6Ef30H1/13mq1yuVyqUKWa/6F/WMVssjlcslqtXq9bl/VLEkX3Ea1ud3WwGteT03zeouv5m4sNdel/758392I/PGZX5f1XdPZTL5gGIbKysoUHR0th8Oh9PR0z2Pnz59XRkaGBgwY4McKAQBAY+LXLTPPP/+8hg0bprZt26qkpETvvPOOtm3bpg0bNshisWj69OlKTk5WTEyMYmJilJycrODgYCUlJfmzbAAA0Ij4NcycPHlSjz32mE6cOKGwsDD16tVLGzZsUEJCgiRp1qxZcrlcmjp1qk6fPq3Y2Fht2rRJISEh/iwbAAA0In4NM1f75m2LxSKn0ymn09kwBQEAANNpdMfMAAAA1AVhBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmBphBgAAmJpfw8yCBQv0k5/8RCEhIQoPD9dDDz2knJycKmMMw5DT6VRUVJTsdrvi4+N1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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##############################################################################\n",
    "###########################     Histograms     ###############################         \n",
    "##############################################################################\n",
    "\n",
    "# Histograms that will help us to understand how Birthweight is distributed so \n",
    "# We can understand better what we need to predict. \n",
    "\n",
    "# We can clearly see that the highest percentaje are address to those kids \n",
    "# who weight more than 2500.\n",
    "\n",
    "\n",
    "plt.hist(data['bwght'], bins=20, color='skyblue', edgecolor='black')\n",
    "plt.xlabel('Birthweight')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Birthweight')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "9e3468ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/carmencastillomartin/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##############################################################################\n",
    "########################   Exploring variables     ###########################         \n",
    "##############################################################################\n",
    "# With these graphs below we can see how each variable is distributed: \n",
    "\n",
    "fig, ax = plt.subplots(figsize = (12, 8))\n",
    "ax.remove()\n",
    "\n",
    "# initializing a counter\n",
    "count = 0\n",
    "\n",
    "\n",
    "# looping to create visualizations\n",
    "for col in df_full:\n",
    "\n",
    "    # condition to break\n",
    "    if count == 9:\n",
    "        break\n",
    "    \n",
    "    # increasing count\n",
    "    count += 1\n",
    "    \n",
    "    # preparing histograms\n",
    "    plt.subplot(3, 3, count)\n",
    "    sns.histplot(x = df_full[col],\n",
    "                kde = True)\n",
    "\n",
    "\n",
    "# formatting, saving, and displaying the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87ce19fa",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<h3>Feature Engineering</h3>\n",
    "\n",
    "<p>\n",
    "\n",
    "</p>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "094f59d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "##############################################################################\n",
    "################       Defining our response variable       ##################       \n",
    "##############################################################################\n",
    "\n",
    "y_variable = 'low_bwght'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "c243ab47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#############################################################################\n",
    "############################## Feature 01 ###################################\n",
    "#############################################################################\n",
    "\n",
    "## It is highly recommended that the prenatal care starts before the 3rd month\n",
    "# Assuming 'df' is your DataFrame containing the 'monpre' column\n",
    "\n",
    "# Create a new column 'month_care_risk' based on values in 'monpre'\n",
    "df_full['month_care_risk'] = df_full['monpre'].apply(lambda x: 1 if x > 3 else 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "37362c77",
   "metadata": {},
   "outputs": [],
   "source": [
    "##############################################################################\n",
    "##############################  Feature 02  ##################################\n",
    "##############################################################################\n",
    "\n",
    "## Studying if Ethinity of the family is address to birthweight.\n",
    "# This \n",
    "\n",
    "df_full['Family Ethnicity'] = 'Mix'\n",
    "\n",
    "# Iterate through each row\n",
    "for index, row in data.iterrows():\n",
    "    # Check if both mother and father are white\n",
    "    if row['mwhte'] == 1 and row['fwhte'] == 1:\n",
    "        df_full.at[index, 'Family Ethnicity'] = 'White'\n",
    "    # Check if both mother and father are black\n",
    "    elif row['mblck'] == 1 and row['fblck'] == 1:\n",
    "        df_full.at[index, 'Family Ethnicity'] = 'Black'\n",
    "\n",
    "##############################################################################\n",
    "##############################  Feature 03  ##################################\n",
    "##############################################################################\n",
    "\n",
    "\n",
    "\n",
    "df_full['mother_risk_due_to_age'] = 0\n",
    "\n",
    "# Establecer el valor en 1 para las madres mayores de 35 años\n",
    "df_full.loc[df_full['mage'] >= 35, 'mother_risk_due_to_age'] = 1\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "##############################  Feature 04  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# Other way to classify mothers age the younger, the less dangerous so they \n",
    "# might have an healhier baby\n",
    "\n",
    "\n",
    "df_full['mage_Q'] = pd.qcut(df_full['mage'], q=4, labels=False)\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "##############################  Feature 05  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# Exploring how ethinicity could affect the kid weight. \n",
    "# This code will assign 1 - if the whole family (mother and father are from \n",
    "# The same ethinity, otherwise it will assign 0)\n",
    "\n",
    "\n",
    "df_full['ethnicity_number'] = '0'\n",
    "\n",
    "# Iterate through each row\n",
    "for index, row in data.iterrows():\n",
    "    # Check if both mother and father are white\n",
    "    if row['mwhte'] == 1 and row['fwhte'] == 1:\n",
    "        df_full.at[index, 'ethnicity_number'] = 1  # Assign 1 to white families\n",
    "    # Check if both mother and father are black\n",
    "    elif row['mblck'] == 1 and row['fblck'] == 1:\n",
    "        df_full.at[index, 'ethnicity_number'] = 1  # Assign 0 to black families\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "##############################  Feature 06  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# This feature tries to identify how dangerous could be having a baby on late \n",
    "# ages based on the mage_Q quartiles classification - \n",
    "\n",
    "df_full['mage_Q_2'] = 0\n",
    "\n",
    "# Apply conditions to set values of 'otra_col_2'\n",
    "df_full.loc[(df_full['male'] == 1) & (df_full['mage_Q'].between(2, 4)), 'mage_Q_2'] = 1\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "4df9b89f",
   "metadata": {},
   "outputs": [],
   "source": [
    "##############################################################################\n",
    "##############################  Feature 07  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# 1. Sum of mage and fage (mother and father age). With this we can see the \n",
    "# total age of the couple\n",
    "\n",
    "df_full['parental_age_interaction'] = df_full['mage'] * df_full['fage']\n",
    "\n",
    "# 2. Creating quartiles to classify age so it will be easier identify age \n",
    "# range\n",
    "\n",
    "\n",
    "quartiles = df_full['parental_age_interaction'].quantile([0.25, 0.5, 0.75])\n",
    "\n",
    "# Function to categorize each record based on quartiles\n",
    "def categorize_interaction(row):\n",
    "    if row <= quartiles.iloc[0]:\n",
    "        return 0  # Q1\n",
    "    elif row <= quartiles.iloc[1]:\n",
    "        return 1  # Q2\n",
    "    elif row <= quartiles.iloc[2]:\n",
    "        return 2  # Q3\n",
    "    else:\n",
    "        return 3  # Q4\n",
    "\n",
    "# Apply the function to create the new column\n",
    "df_full['parental_age_interaction_number'] = df_full['parental_age_interaction'].apply(categorize_interaction)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "bac14b6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "##############################################################################\n",
    "##############################  Feature 08  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# How the mother age affects the weight\n",
    "\n",
    "df_full['mage_cigs_interaction'] = df_full['mage'] * df_full['cigs']\n",
    "\n",
    "##############################################################################\n",
    "##############################  Feature 09  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# How the mother age who smokes affects the weight \n",
    "\n",
    "df_full['mage_drink_interaction'] = df_full['mage'] * df_full['drink']\n",
    "\n",
    "##############################################################################\n",
    "##############################  Feature 10  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# How mother´s education is correlated to visits to the hospital\n",
    "\n",
    "df_full['meduc_npvis_interaction'] = df_full['meduc'] * df_full['npvis']\n",
    "\n",
    "##############################################################################\n",
    "##############################  Feature 11  ##################################\n",
    "##############################################################################\n",
    "\n",
    "# How father´s education is correlated to visits to the hospital\n",
    "\n",
    "df_full['feduc_npvis_interaction'] = df_full['feduc'] * df_full['npvis']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "6a3fb863",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bwt_id                              0\n",
       "mage                                0\n",
       "meduc                               0\n",
       "monpre                              0\n",
       "npvis                               0\n",
       "fage                                0\n",
       "feduc                               0\n",
       "cigs                                0\n",
       "drink                               0\n",
       "male                                0\n",
       "mwhte                               0\n",
       "mblck                               0\n",
       "moth                                0\n",
       "fwhte                               0\n",
       "fblck                               0\n",
       "foth                                0\n",
       "bwght                              64\n",
       "set                                 0\n",
       "month_care_risk                     0\n",
       "Family Ethnicity                    0\n",
       "mother_risk_due_to_age              0\n",
       "mage_Q                              0\n",
       "ethnicity_number                    0\n",
       "mage_Q_2                            0\n",
       "parental_age_interaction            0\n",
       "parental_age_interaction_number     0\n",
       "mage_cigs_interaction               0\n",
       "mage_drink_interaction              0\n",
       "meduc_npvis_interaction             0\n",
       "feduc_npvis_interaction             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking that there is not any null values anymore after feature engineering \n",
    "\n",
    "df_full.isnull().sum(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "63448c03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bwght</th>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feduc_npvis_interaction</th>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>npvis</th>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>meduc_npvis_interaction</th>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fage</th>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parental_age_interaction</th>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parental_age_interaction_number</th>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>monpre</th>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feduc</th>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_number</th>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mage</th>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fblck</th>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mage_Q</th>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fwhte</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>month_care_risk</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mblck</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mwhte</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mother_risk_due_to_age</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mage_Q_2</th>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>meduc</th>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>drink</th>\n",
       "      <td>-0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mage_drink_interaction</th>\n",
       "      <td>-0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mage_cigs_interaction</th>\n",
       "      <td>-0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cigs</th>\n",
       "      <td>-0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>moth</th>\n",
       "      <td>-0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foth</th>\n",
       "      <td>-0.07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 bwght\n",
       "bwght                             1.00\n",
       "feduc_npvis_interaction           0.18\n",
       "npvis                             0.18\n",
       "meduc_npvis_interaction           0.15\n",
       "fage                              0.14\n",
       "parental_age_interaction          0.10\n",
       "parental_age_interaction_number   0.08\n",
       "monpre                            0.06\n",
       "feduc                             0.06\n",
       "male                              0.06\n",
       "ethnicity_number                  0.05\n",
       "mage                              0.05\n",
       "fblck                             0.04\n",
       "mage_Q                            0.03\n",
       "fwhte                             0.02\n",
       "month_care_risk                   0.02\n",
       "mblck                             0.02\n",
       "mwhte                             0.02\n",
       "mother_risk_due_to_age            0.01\n",
       "mage_Q_2                          0.01\n",
       "meduc                             0.00\n",
       "drink                            -0.03\n",
       "mage_drink_interaction           -0.03\n",
       "mage_cigs_interaction            -0.04\n",
       "cigs                             -0.04\n",
       "moth                             -0.05\n",
       "foth                             -0.07"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Checking correlations and dropping strings cols \n",
    "\n",
    "df_corr = df_full.drop(columns=['bwt_id','Family Ethnicity','set'\n",
    "                               ]).corr(method = 'pearson').round(2)\n",
    " \n",
    "df_corr.loc[ : , ['bwght'] ].sort_values(by = 'bwght',\n",
    "                                                                ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "620cfa2a",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<h3>Standarization</h3>\n",
    "\n",
    "<p>\n",
    "\n",
    "</p>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "95be47c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "#This is going to help us to have all our features on the same measures so \n",
    "#our analysis will make sense\n",
    "\n",
    "# List of continuous features to standardize - Adding numericals features including new features and transformations\n",
    "continuous_features = ['mage', 'meduc', 'monpre', 'npvis', 'fage', 'feduc', 'cigs', 'drink', 'male', 'mwhte', 'mblck', 'moth', 'fwhte', \n",
    "                       'fblck', 'foth', 'bwght', 'month_care_risk', 'mother_risk_due_to_age', 'mage_Q', 'ethnicity_number', \n",
    "                       'parental_age_interaction', 'parental_age_interaction_number' \n",
    "                       ]\n",
    "\n",
    "# Initialize the StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit the scaler to the continuous features and transform them\n",
    "df_full[continuous_features] = scaler.fit_transform(df_full[continuous_features])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "ad77e3bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separating the kaggle data \n",
    "## Parsing out testing data (needed for later) ##\n",
    "\n",
    "# dataset for kaggle\n",
    "kaggle_data = df_full[df_full['set'] == 'Kaggle'].copy()\n",
    "\n",
    "\n",
    "# dataset for model building\n",
    "df = df_full[df_full['set'] == 'Not Kaggle' ].copy()\n",
    "\n",
    "\n",
    "\n",
    "# dropping set identifier (kaggle)\n",
    "kaggle_data.drop(labels = 'set',\n",
    "                 axis = 1,\n",
    "                 inplace = True)\n",
    "\n",
    "\n",
    "# dropping set identifier (model building)\n",
    "df.drop(labels = 'set',\n",
    "        axis = 1,\n",
    "        inplace = True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17625193",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<h3>Definition of variables</h3>\n",
    "\n",
    "<p>\n",
    "On this part on the script, x_features and low_bwght are defined, to later go \n",
    "    through the model.\n",
    "</p>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "ee6c4694",
   "metadata": {},
   "outputs": [],
   "source": [
    "##############################################################################\n",
    "###########################  Defining x features   ###########################\n",
    "##############################################################################\n",
    "\n",
    "## Excluding those variables which are correlated below 0 or negative from the \n",
    "# model, so we will get better results as well as non numerical, otherwise \n",
    "# our model would not run \n",
    "\n",
    "x_features= ['npvis', 'fage', 'monpre','feduc',\n",
    "            'male','mage','ethnicity_number','fblck',\n",
    "            'mage_Q','fwhte','mblck','mwhte','mother_risk_due_to_age','parental_age_interaction',\n",
    "            'feduc_npvis_interaction','meduc_npvis_interaction', 'parental_age_interaction', 'parental_age_interaction_number',\n",
    "            'month_care_risk']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "75e9095a",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Converting birthweight into a binary classification metric (low birthweight as 1, otherwise 0)\n",
    "df['low_bwght'] = (df['bwght'] < 2500).astype(int)\n",
    "\n",
    "df_full['low_bwght'] = (df['bwght'] < 2500).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "5f3c16f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Original Dataset Dimensions\n",
      "---------------------------\n",
      "Observations (Rows): 409\n",
      "Features  (Columns): 30\n",
      "\n",
      "\n",
      "Training Data (X-side)\n",
      "----------------------\n",
      "Observations (Rows): 306\n",
      "Features  (Columns): 19\n",
      "\n",
      "\n",
      "Training Data (y-side)\n",
      "----------------------\n",
      "Feature Name:        low_bwght\n",
      "Observations (Rows): 306\n",
      "\n",
      "\n",
      "Testing Data (X-side)\n",
      "---------------------\n",
      "Observations (Rows): 103\n",
      "Features  (Columns): 19\n",
      "\n",
      "\n",
      "Testing Data (y-side)\n",
      "---------------------\n",
      "Feature Name:        low_bwght\n",
      "Observations (Rows): 103\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "y_data = df[y_variable]\n",
    "\n",
    "\n",
    "# removing non-numeric columns and missing values\n",
    "x_data = df[x_features].copy().select_dtypes(include=[int, float]).dropna(axis = 1)\n",
    "\n",
    "\n",
    "# storing remaining x_features after the step above\n",
    "x_features = list(x_data.columns)\n",
    "\n",
    "\n",
    "\n",
    "# train-test split (to validate the model)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x_data, \n",
    "                                                    y_data, \n",
    "                                                    test_size    = 0.25,\n",
    "                                                    random_state = 702)\n",
    "                                                     \n",
    "\n",
    "# results of train-test split\n",
    "print(f\"\"\"\n",
    "Original Dataset Dimensions\n",
    "---------------------------\n",
    "Observations (Rows): {df.shape[0]}\n",
    "Features  (Columns): {df.shape[1]}\n",
    "\n",
    "\n",
    "Training Data (X-side)\n",
    "----------------------\n",
    "Observations (Rows): {x_train.shape[0]}\n",
    "Features  (Columns): {x_train.shape[1]}\n",
    "\n",
    "\n",
    "Training Data (y-side)\n",
    "----------------------\n",
    "Feature Name:        {y_train.name}\n",
    "Observations (Rows): {y_train.shape[0]}\n",
    "\n",
    "\n",
    "Testing Data (X-side)\n",
    "---------------------\n",
    "Observations (Rows): {x_test.shape[0]}\n",
    "Features  (Columns): {x_test.shape[1]}\n",
    "\n",
    "\n",
    "Testing Data (y-side)\n",
    "---------------------\n",
    "Feature Name:        {y_test.name}\n",
    "Observations (Rows): {y_test.shape[0]}\"\"\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "154af7d4",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<h3>Model</h3>\n",
    "\n",
    "<p>\n",
    "    <h4>Random Forest Classifier</h4>\n",
    "      Random Forest Classifier has been selected from all the models, as it is the one that gave \n",
    "      better results on Kaggle which means that provided better predicitions.\n",
    "    \n",
    "</p>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "fe0c38ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training ACCURACY: 1.0\n",
      "Testing  ACCURACY: 1.0\n",
      "\n",
      "True Negatives : [103]\n",
      "False Positives: [103]\n",
      "False Negatives: [103]\n",
      "True Positives : [103]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import roc_auc_score, confusion_matrix\n",
    "\n",
    "#Random Forest Classifier \n",
    "rf_default = RandomForestClassifier(n_estimators     = 100,\n",
    "                                    criterion        = 'gini',\n",
    "                                    max_depth        = 8,\n",
    "                                    min_samples_leaf = 1,\n",
    "                                    bootstrap        = True,\n",
    "                                    warm_start       = False,\n",
    "                                    random_state     = 702)\n",
    "\n",
    "# FITTING the training data\n",
    "rf_default_fit = rf_default.fit(x_train, y_train)\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "rf_default_fit_pred = rf_default_fit.predict(x_test)\n",
    "\n",
    "# SCORING the results\n",
    "print('Training ACCURACY:', round(rf_default_fit.score(x_train, y_train), ndigits = 4))\n",
    "print('Testing  ACCURACY:', round(rf_default_fit.score(x_test , y_test ), ndigits = 4))\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "\n",
    "# Unpacking the confusion matrix\n",
    "rf_tn= confusion_matrix(y_true = y_test, y_pred = rf_default_fit_pred).ravel()\n",
    "rf_fp= confusion_matrix(y_true = y_test, y_pred = rf_default_fit_pred).ravel()\n",
    "rf_fn= confusion_matrix(y_true = y_test, y_pred = rf_default_fit_pred).ravel()\n",
    "rf_tp = confusion_matrix(y_true = y_test, y_pred = rf_default_fit_pred).ravel()\n",
    "\n",
    "\n",
    "# Printing each result one-by-one\n",
    "print(f\"\"\"\n",
    "True Negatives : {rf_tn}\n",
    "False Positives: {rf_fp}\n",
    "False Negatives: {rf_fn}\n",
    "True Positives : {rf_tp}\n",
    "\"\"\")  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "676a8c4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# x-data\n",
    "x_data_kaggle = kaggle_data[x_features].copy()\n",
    "\n",
    "# Predicting using the fitted model\n",
    "kaggle_predictions = rf_default.predict(x_data_kaggle)\n",
    "\n",
    "# Organizing predictions\n",
    "model_predictions = {\"low_bwght\" : kaggle_predictions}\n",
    "\n",
    "# Converting predictions into DataFrame\n",
    "model_pred_df = pd.DataFrame(data=model_predictions, index=kaggle_data.bwt_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "b110bfc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Submission file saved to: kaggle_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# Saving the submission file locally\n",
    "submission_file_path = 'kaggle_submission.csv'\n",
    "model_pred_df.to_csv(submission_file_path, index=True)\n",
    "\n",
    "print(f\"Submission file saved to: {submission_file_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "8f2204ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Kaggle Submission File ##\n",
    "\n",
    "# organizing predictions\n",
    "model_predictions = {\"low_bwght\" : kaggle_predictions}\n",
    "\n",
    "\n",
    "# converting predictions into df\n",
    "model_pred_df = pd.DataFrame(data  = model_predictions,\n",
    "                             index = kaggle_data.bwt_id)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
